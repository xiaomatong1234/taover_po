{"name": "在列表中成功查询商品rt3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (291, 394). Other element would receive the click: <div data-v-2bb29ffc=\"\" class=\"el-row\">...</div>\n  (Session info: chrome=134.0.6998.45)\nStacktrace:\n0   chromedriver                        0x0000000104f73b78 cxxbridge1$str$ptr + 2778912\n1   chromedriver                        0x0000000104f6c1b0 cxxbridge1$str$ptr + 2747736\n2   chromedriver                        0x0000000104ac1e24 cxxbridge1$string$len + 92932\n3   chromedriver                        0x0000000104b0ebd0 cxxbridge1$string$len + 407728\n4   chromedriver                        0x0000000104b0d160 cxxbridge1$string$len + 400960\n5   chromedriver                        0x0000000104b0af74 cxxbridge1$string$len + 392276\n6   chromedriver                        0x0000000104b0a370 cxxbridge1$string$len + 389200\n7   chromedriver                        0x0000000104afed74 cxxbridge1$string$len + 342612\n8   chromedriver                        0x0000000104afe800 cxxbridge1$string$len + 341216\n9   chromedriver                        0x0000000104b4a500 cxxbridge1$string$len + 651744\n10  chromedriver                        0x0000000104afd2e4 cxxbridge1$string$len + 335812\n11  chromedriver                        0x0000000104f39d04 cxxbridge1$str$ptr + 2541740\n12  chromedriver                        0x0000000104f3cfc8 cxxbridge1$str$ptr + 2554736\n13  chromedriver                        0x0000000104f1aa44 cxxbridge1$str$ptr + 2414060\n14  chromedriver                        0x0000000104f3d828 cxxbridge1$str$ptr + 2556880\n15  chromedriver                        0x0000000104f0b998 cxxbridge1$str$ptr + 2352448\n16  chromedriver                        0x0000000104f5c3a4 cxxbridge1$str$ptr + 2682700\n17  chromedriver                        0x0000000104f5c52c cxxbridge1$str$ptr + 2683092\n18  chromedriver                        0x0000000104f6be24 cxxbridge1$str$ptr + 2746828\n19  libsystem_pthread.dylib             0x000000018eca02e4 _pthread_start + 136\n20  libsystem_pthread.dylib             0x000000018ec9b0fc thread_start + 8", "trace": "args = (<taover_po.page.shop_list_page.ShopListPage object at 0x10675bc20>, 'xpath', '//span[text()=\"查询\"]'), kwargs = {}\nbasepage = <taover_po.page.shop_list_page.ShopListPage object at 0x10675bc20>\nimage_path = '/Volumes/software/warehouse/web_automation/taover_po/images/20250403164612.png'\npagesource_path = '/Volumes/software/warehouse/web_automation/taover_po/page_sources/20250403164613.html'\n\n    def run(*args, **kwargs):\n        basepage = args[0]\n        try:\n            logger.info(f'查找元素定位方式: {args[1]}, 定位元素: {args[2]}')\n            basepage.set_imp_wait(20)\n>           return fun(*args, **kwargs)\n\n../base/error_popups.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../base/base_page.py:91: in find_ele_click\n    self.find_ele(by,value).click()\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106cc5d30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...00018eca02e4 _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x000000018ec9b0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (286, 394). Other element would receive the click: <div data-v-2bb29ffc=\"\" class=\"el-row\">...</div>\nE         (Session info: chrome=134.0.6998.45)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104f73b78 cxxbridge1$str$ptr + 2778912\nE       1   chromedriver                        0x0000000104f6c1b0 cxxbridge1$str$ptr + 2747736\nE       2   chromedriver                        0x0000000104ac1e24 cxxbridge1$string$len + 92932\nE       3   chromedriver                        0x0000000104b0ebd0 cxxbridge1$string$len + 407728\nE       4   chromedriver                        0x0000000104b0d160 cxxbridge1$string$len + 400960\nE       5   chromedriver                        0x0000000104b0af74 cxxbridge1$string$len + 392276\nE       6   chromedriver                        0x0000000104b0a370 cxxbridge1$string$len + 389200\nE       7   chromedriver                        0x0000000104afed74 cxxbridge1$string$len + 342612\nE       8   chromedriver                        0x0000000104afe800 cxxbridge1$string$len + 341216\nE       9   chromedriver                        0x0000000104b4a500 cxxbridge1$string$len + 651744\nE       10  chromedriver                        0x0000000104afd2e4 cxxbridge1$string$len + 335812\nE       11  chromedriver                        0x0000000104f39d04 cxxbridge1$str$ptr + 2541740\nE       12  chromedriver                        0x0000000104f3cfc8 cxxbridge1$str$ptr + 2554736\nE       13  chromedriver                        0x0000000104f1aa44 cxxbridge1$str$ptr + 2414060\nE       14  chromedriver                        0x0000000104f3d828 cxxbridge1$str$ptr + 2556880\nE       15  chromedriver                        0x0000000104f0b998 cxxbridge1$str$ptr + 2352448\nE       16  chromedriver                        0x0000000104f5c3a4 cxxbridge1$str$ptr + 2682700\nE       17  chromedriver                        0x0000000104f5c52c cxxbridge1$str$ptr + 2683092\nE       18  chromedriver                        0x0000000104f6be24 cxxbridge1$str$ptr + 2746828\nE       19  libsystem_pthread.dylib             0x000000018eca02e4 _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x000000018ec9b0fc thread_start + 8\n\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <taover_po.tests.test_good_manage.TestGoodManage object at 0x106378d40>, good_name = 'rt3'\n\n    @pytest.mark.parametrize(\n        'good_name',[search_case_pass['good_name']],\n        ids=[search_case_pass['good_name']]\n    )\n    @allure.story('查询商品功能')\n    @allure.title('在列表中成功查询商品rt3')\n    def test_search_good(self,good_name):\n        res = self.shop_list_page\\\n>           .search_good(good_name)\n\ntest_good_manage.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../page/shop_list_page.py:44: in search_good\n    self.find_ele_click(*self._SEARCH_BT) # 点击查询\n../base/error_popups.py:36: in run\n    return fun(*args, **kwargs)\n../base/base_page.py:91: in find_ele_click\n    self.find_ele(by,value).click()\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106cc5d30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...00018eca02e4 _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x000000018ec9b0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (291, 394). Other element would receive the click: <div data-v-2bb29ffc=\"\" class=\"el-row\">...</div>\nE         (Session info: chrome=134.0.6998.45)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104f73b78 cxxbridge1$str$ptr + 2778912\nE       1   chromedriver                        0x0000000104f6c1b0 cxxbridge1$str$ptr + 2747736\nE       2   chromedriver                        0x0000000104ac1e24 cxxbridge1$string$len + 92932\nE       3   chromedriver                        0x0000000104b0ebd0 cxxbridge1$string$len + 407728\nE       4   chromedriver                        0x0000000104b0d160 cxxbridge1$string$len + 400960\nE       5   chromedriver                        0x0000000104b0af74 cxxbridge1$string$len + 392276\nE       6   chromedriver                        0x0000000104b0a370 cxxbridge1$string$len + 389200\nE       7   chromedriver                        0x0000000104afed74 cxxbridge1$string$len + 342612\nE       8   chromedriver                        0x0000000104afe800 cxxbridge1$string$len + 341216\nE       9   chromedriver                        0x0000000104b4a500 cxxbridge1$string$len + 651744\nE       10  chromedriver                        0x0000000104afd2e4 cxxbridge1$string$len + 335812\nE       11  chromedriver                        0x0000000104f39d04 cxxbridge1$str$ptr + 2541740\nE       12  chromedriver                        0x0000000104f3cfc8 cxxbridge1$str$ptr + 2554736\nE       13  chromedriver                        0x0000000104f1aa44 cxxbridge1$str$ptr + 2414060\nE       14  chromedriver                        0x0000000104f3d828 cxxbridge1$str$ptr + 2556880\nE       15  chromedriver                        0x0000000104f0b998 cxxbridge1$str$ptr + 2352448\nE       16  chromedriver                        0x0000000104f5c3a4 cxxbridge1$str$ptr + 2682700\nE       17  chromedriver                        0x0000000104f5c52c cxxbridge1$str$ptr + 2683092\nE       18  chromedriver                        0x0000000104f6be24 cxxbridge1$str$ptr + 2746828\nE       19  libsystem_pthread.dylib             0x000000018eca02e4 _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x000000018ec9b0fc thread_start + 8\n\n../../../python_practice/python_prac0107/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "查找元素异常截图", "source": "f43ac166-7a7c-4f61-aff9-fa07441ad954-attachment.png", "type": "image/png"}, {"name": "查找元素异常页面源码", "source": "7ea37443-1495-4b55-a40c-08a42ad6204b-attachment.html", "type": "text/html"}, {"name": "log", "source": "1ba20fd8-bcb4-4200-9f84-a07fce335562-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "good_name", "value": "'rt3'"}], "start": 1743669970195, "stop": 1743669974095, "uuid": "3de7cbce-07f2-4af1-b3be-867cf70c19a7", "historyId": "919b97eb685fb50f08c7ae2d88b6e2bb", "testCaseId": "ce679fbe9f1e53904eefb707d0ba4729", "fullName": "test_good_manage.TestGoodManage#test_search_good", "labels": [{"name": "story", "value": "查询商品功能"}, {"name": "feature", "value": "商品列表模块"}, {"name": "suite", "value": "test_good_manage"}, {"name": "subSuite", "value": "TestGoodManage"}, {"name": "host", "value": "MacBookPro.lan"}, {"name": "thread", "value": "31683-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_good_manage"}]}